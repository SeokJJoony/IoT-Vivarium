1. 아두이노는 교육용 보드이기 때문에 시장에 내놓을 제품을 만드는데 한계가 있다는 걸 크게 느낌(아직 내가 무지한걸수도...)
일단 내 졸업작품에 필요한 센서가 7개나 됐음, 처음에 데이터 시트에서 각 센서의 사용 전류를 확인하지 않고 결선하여
7개중 수위감지센서가 말썽이 있었음(이거때매 너무 스트레스) 아두이노 각 핀의 허용 전류(https://m.blog.naver.com/sigsaly/220530291461 참고)
를 참고하여 5V 2A 어댑터를 구입하기로 결정함. (5V 2A 어댑터 결선시 주의할 점 어댑터 그라운드와 아두이노 그라운드핀이 꼭 연결되어 공유되어야함!
또, 각 전자부품들의 허용 전류를 넘으면 안되기 때문에 두개의 아두이노 각각 1A씩 나눠서 주면됨.)

2. 앱인벤터 또한 블록코딩으로 구현하는 IDE이기 때문에 한계점이 참 많은 툴이었음, 내부 DB인 TinyDB로 회원계정과 파충류 정보 환경값까지 저장하여
실시간 저장을 하려고 했지만 이름처럼 너무 작아 회원가입만 가능하였음 그래서 google의 firebase로 변경. 학교 친구도 나와 비슷한 IoT제품인 
스마트 화분을 만들고 있어서 DB변경에 도움을 줌(로그인도 문제가 보여서 고쳐줌ㅎㅎ). 이제 대용량 구글의 firebase로 뭘할까 생각하여 구상한게
주간 온습도 평균값과 주간 움직임 수치 저장을 생각하게됨. 그리고 일주일중 제일 움직임이 많은날의 온도와 습도를 추출하고자 계획함.(추후 계발 예정)
내가 생각한 firebase의 문제점은 내가 firebase 홈페이지에서 작성한 텍스트를 앱인벤터에서 못 읽어들이는 문제점이 있었음(아직도 잘모르겠음)
firebase를 앱인벤터와 연동하려면 앱에서 firebase에 값을 저장하여 저장된 내용을 읽어들이는 방법밖에 없었음. 그리고 앱인벤터 컴퍼넌트 설정에
firebase 개인 주소를 입력하여 링크시키는데 이거도 시간이 지나면 초기화되어서 파충류 정보가 앱에 안떴음.

3. 아두이노는 아트메가처럼 UART 인터럽트가 따로 없었음. 그래서 통합부 아두이노에서 수신동작을 외부 인터럽트로 처리하게 하였음. 램프 세기
조절을 위한 영전위 검출 방식때도 외부 인터럽트를 사용해봤는데 실행속도에서 딜레이가 있었음. 마찬가지로 수신동작도 딜레이가 생겼음. 인터럽트를
사용하지 않고 수신하면 빠른 장점이 있는 반면에 명령이 다른 명령에 의해 무시될수도있음. 동작이 안되는 것보다야 조금 느리게 동작하는게 나을 것 같아서
외부 인터럽트 사용으로 채택하였음. 외부 인터럽트 핀은 2번이기 때문에 꼭 softwareserial 선언으로 통신 핀설정을 해주어야함!

4. 펌프를 두 종류 사용하는데 LCD를 실시간으로 구동하는 탓에 펌프 하나가 전력 부족으로 제어가 안됐음. LCD를 메인 루프문에 상시 출력으로 코딩해놨던 것이
문제였음. millis() 함수로 4초마다 LCD 창에 값을 출력하게 해놓으니 그 사이에 펌프가 구동이 되면서 ON/OFF 제어가 잘 됐음. 혹시 몰라 millis함수로 펌프
도 타이머를 설정하여 시간이 지나면 꺼지게 했는데. 그렇게 하면 펌프 ON 버튼 누른후 시간이 지나서 꺼졌을 때 다시 ON버튼 동작이 안됐음(슬레이브 아두이노
에서 외부 인터럽트로 센서부 아두이노 측의 명령어를 받으면 falling edge나 rising edge 또는 toggle시에 명령어 수신을 할 수 가 있었음. 그런 이유로 
명령을 하나 보내면 하나의 명령어가 반복해서 가는 문제가 있었음. 문자형 변수 두개를 선언해서 명령을 내린 뒤 그 명령어를 저장해놨다가 추후 명령을 할 때 
비교하여 같으면 안보내는 알고리즘을 코드에 추가했음). 펌프를 키는 명령어 문자는 예외로 했음. 

5. 4번 문제를 해결하면서 millis()함수를 이용해 타이머 설정기능 구현을 자유자재로 할 수 있게됨. 처음에는 아두이노가 구동되는 시점부터 구동시간을 
변수에 저장해놓고 타이머 기능을 구현하려고 했으나 구동시간을 내가 실시간으로 볼수가 없기 때문에 불가능 했음. 메인 루프가 반복되면서 시스템 시간을
세는 것 보다 기능 동작이 실행될때의 시스템 시간을 1번 변수에 고정시키고 2번변수에 실시간 시스템 시간을 저장시켜 2번-1번이 x초(사용자 설정 시간)가 
지났을때 다음 기능이 동작하게 구현하면 사용자가 원하는 시간에 동작을 구동시킬 수 있음! 파충류의 먹이 및 물 공급이나 미스팅 시스템 구동을 자동 사육
환경에서 타이머로 설정하려고함.

6. 같은 명령어를 연속으로 보내지 못하게 하는 알고리즘 때문에 물 공급 같은 타이머 기능이 들어간 기능은 자동으로 꺼지면 다시 못 키는 문제점이 있었음. 
타이머 제어로 수행되는 기능들은 예외로 하여 연속 명령이 가능해서 다시 킬 수 있도록 하였지만 연속된 명령어가 계속 보내져서 다른 기능도 동작하는 
문제점이 발생. 통합부의 타이머가 완료되어 동작이 끝나면 센서부로 완료를 알려 이전 명령어 저장 변수를 초기화 시켜주도록 해주니 정상 동작했음.
(코드 한줄때매 전체 동작에 문제가 발생할 수 있다는 것을 뼈저리게 깨달음. 문제가 발생하면 하드웨어 문제로만 생각했던 나의 멍청한 생각을 반성
했음.)

 


 

