#include <MsTimer2.h>           //타이머 인터럽트 라이브러리
#include <LiquidCrystal_I2C.h>  //LCD 라이브러리 
#include <SoftwareSerial.h>     //블루투스 통신 라이브러리
#include <DHT.h>                //온습도 센서 라이브러리

#define DHTTYPE DHT22           //핀 설정
#define UVOUT A0
#define REF_3V3 A1
#define WATER A2
#define DOORPIN 4
#define DHTPIN 5
#define Moving1 10
#define Moving2 11
#define Moving3 12
#define Moving4 13

LiquidCrystal_I2C lcd(0x27, 16, 2);
SoftwareSerial BTSerial(8,9);
DHT dht(DHTPIN,DHTTYPE);

typedef struct TempComponent{     //온도 센서 구조체
  int Temp = 0;
  int TempSum = 0;
  int TempAvg = 0;  
}TEMP;

typedef struct HumiComponent{     //습도 센서 구조체
  int Humi = 0;
  int HumiSum = 0;
  int HumiAvg = 0;    
}HUMI;

typedef struct UvComponent{       //UV 센서 구조체  
int uvLevel = 0;
int refLevel = 0;
float uvIntensity=0.0;  
}UV;

typedef struct MovingComponent{   //움직임 센서 구조체 
  int Mov1=0;                
  int Mov2=0;
  int Mov3=0;
  int Mov4=0;
  unsigned int MovSum=0;             //센서 데이터 누적 값
  int MovCount = 0;                  //센서 데이터 기반으로 한 활동량 카운트
  int MovPrevResult[7] = {60,};      //초기값은 탈피 징후 활동량(2일 50미만)보다 높은 60
  int MovResult[7] = {60,};          //초기값은 탈피 징후 활동량(2일 50미만)보다 높은 60
  int MovTwoThre = 50;               //탈피 징후 활동량(2일 50미만)
  int MovSevenThre = 0;              //탈피 징후 횟수를 세는 변수(7일 움직임이 없을 시 질병으로 간주) 
  int MovState=2;                    //0: 질병 1: 탈피 2: 활동량          
}MOV;

int Day = 0;
int Misttank = 0;
int Water = 0;
int doorState=0;
unsigned long PreviousMillis = 0;
unsigned int DayCount=0;
int dateCh = 0;
int WCharge = 0;
   
char AppValue=0;
char PrevAppValue=0;
char AutoAppValue=0;
char PrevAutoAppValue=0;
char data[13]={0,};

TEMP temp;                          //구조체 객체 선언
HUMI humi;
UV uv;
MOV mov;

void Send()                         //아두이노에서 앱으로 송신하는 함수(3초에 한번)
{
  BTSerial.println(data);
  DayCount++;                        
  temp.TempSum += temp.Temp;        
  humi.HumiSum += humi.Humi; 
  if(DayCount%10==0)                //하루가 지났을 때     
  {
     temp.TempSum =0;               
     humi.HumiSum =0;
     mov.MovResult[Day] = mov.MovCount;     //하루 활동량 배열에 저장
     if(Day == 0)                           //금주 첫 날일 시
     {
       mov.MovTwoThre = mov.MovResult[0]+mov.MovPrevResult[6];  //이전주 마지막 날과 금주 첫날의 움직임 합
       if(mov.MovTwoThre <50)                                   //2일 활동량 50 미만일 시
       {
        mov.MovState = 1;                                       //탈피 징후 저장
        mov.MovSevenThre++;                                     //탈피 징후 카운트(질병 감염 여부 파악을 위해)
        if(mov.MovSevenThre==5)                                 //탈피 징후 5번 = 7일 활동량 기준치 미만
        {
          mov.MovState = 0;                                     //질병 감염 징후 저장
          mov.MovSevenThre = 0;                                 //카운트 초기화
        }
        } 
     }
   
     else if(Day>0)
     {
       mov.MovTwoThre = mov.MovResult[Day]+mov.MovResult[Day-1];  //첫날이 아닐때 위와 동일
       if(mov.MovTwoThre <50)
       {
       mov.MovState = 1;
       mov.MovSevenThre++;
        if(mov.MovSevenThre==5)
        {
          mov.MovState = 0;
          mov.MovSevenThre = 0;
        }
       } 
     }
     mov.MovCount = 0;                                             //탈피 징후 검사 후 하루 활동량 저장 변수 초기화
     mov.MovSum = 0;
     Day++;                                                        //배열 인덱스 증가
     if(Day == 7)                                                  //일주일 지났을 시
     {
        for(int i = 0; i<7;i++)     
          mov.MovPrevResult[i] = mov.MovResult[i];                 //금주 데이터 이전주 변수로 저장
        for(int i = 0; i<7;i++)                                 
          mov.MovResult[i] = 0;                                    //금주 데이터 초기화 
        Day =0;
     }
  }
}

void Receive()
{
  if(BTSerial.available()>0)            //앱에서 아두이노로 데이터 전송
  { 
    AppValue= BTSerial.read();
  }
  
  if(AppValue != PrevAppValue)          //앱에서온 데이터 값이 전에 온 값이랑 동일하면 받지않음
  {
    if(AppValue>=0&&AppValue<=127)
    {
    Serial.println(AppValue);
    PrevAppValue=AppValue;
    }
  }
}

void setup(){
  lcd.init();                       //lcd 세팅
  lcd.backlight();
  lcd.setCursor(0,0);
  lcd.print("temp = ");
  lcd.setCursor(11,0);
  lcd.print("C");
  lcd.setCursor(0,1);
  lcd.print("humd = ");
  lcd.setCursor(11,1);
  lcd.print("%");
  
  Serial.begin(9600);               //직렬 통신 보드레이트
  BTSerial.begin(9600);

  MsTimer2::set(3000,Send);         //타이머 카운터 인터럽트 세팅
  MsTimer2::start();                //인터럽트 활성화
  
  pinMode(WATER,INPUT);             //핀설정
  pinMode(UVOUT,INPUT);
  pinMode(Moving1,INPUT);
  pinMode(Moving2,INPUT);
  pinMode(Moving3,INPUT);
  pinMode(Moving4,INPUT);
  pinMode(REF_3V3,INPUT);
  pinMode(DOORPIN, INPUT_PULLUP);
}

float mapfloat(float x,float in_min,float in_max,float out_min,float out_max)       //자외선 수치 값 계산
{
    return (x-in_min)*(out_max-out_min) / (in_max - in_min)+out_min;
}   

int averageAnalogRead(int pinToRead)       //아날로그 값을 8번 측정 후 평균 값 계산        
{
  byte numberOfReadings = 8;
  unsigned int runningValue=0;
  for(int x=0;x<numberOfReadings;x++)
  {
    runningValue +=analogRead(pinToRead);
    return(runningValue);
  }
}

void sensorRecv()                           //센서값 측정하는 함수
{
  temp.Temp= dht.readTemperature();
  humi.Humi= dht.readHumidity();
  uv.uvLevel = averageAnalogRead(UVOUT);
  uv.refLevel = averageAnalogRead(REF_3V3);
  mov.Mov1 = digitalRead(Moving1);
  mov.Mov2 = digitalRead(Moving2);
  mov.Mov3 = digitalRead(Moving3);
  mov.Mov4 = digitalRead(Moving4); 
  mov.MovSum +=mov.Mov1+mov.Mov2+mov.Mov3+mov.Mov4;
  if(mov.MovSum >= 1000)
  {
  mov.MovCount++;
  mov.MovSum = 0;
  }
  float outputVoltage = 3.3/uv.refLevel*uv.uvLevel;
  uv.uvIntensity = mapfloat(outputVoltage,0.99,2.9,0.0,15.0);
  int uvdata1 = (int)(uv.uvIntensity *100)/100;
  int uvdata2 = (int)(uv.uvIntensity *100)%100;
  Water=analogRead(WATER);
  doorState=digitalRead(DOORPIN);  
}

void autoMode()                              //자동사육모드시 무한 루프
{
  while(1)
  { 
    sensorRecv();
    unsigned long CurrentMillis = millis();   
    sprintf(data,"%02d%02d%01d%01d%02d%02d%01d%01d",temp.Temp,humi.Humi,doorState,dateCh,temp.TempAvg,humi.HumiAvg,WCharge,mov.MovState);
    //데이터 스트림
    
    if(Water<100)
    {
      WCharge=1;
      AutoAppValue='#';       //물이 많을때 워터펌프 ON
    }
  
    if(Water>=100)
    {
      WCharge=0;
      AutoAppValue='$';       //물이 많을때 워터펌프 OFF
    }
    
    if(CurrentMillis - PreviousMillis >= 4000)
    {  
    lcd.setCursor(8,0);
    lcd.print(temp.Temp);
    lcd.setCursor(8,1);
    lcd.print(humi.Humi);
    PreviousMillis = CurrentMillis; 
    }
     
    if(DayCount%10==9)
    {
      temp.TempAvg = temp.TempSum/9;
      humi.HumiAvg = humi.HumiSum/9;
    }
  
    else if(DayCount%10==0&&DayCount!=0)
    {
      dateCh=1;
    }
   
    else if(DayCount%10==1)
    {
      dateCh=0;   
    }
  
    if(humi.Humi<60)           //저습일때
    {
      AutoAppValue='['; 
    }
  
    if(temp.Temp>28 &&humi.Humi>=60)        //고온 적정습도일때
    {
      AutoAppValue=']';   
    }
  
    if(temp.Temp>24&&temp.Temp<=28&&humi.Humi>=70)   //적정온도 적정습도일때
    {
      AutoAppValue='{'; 
    }
  
    if(temp.Temp<20 &&humi.Humi>=70)           //저온 적정습도일때
    { 
      AutoAppValue=')';
    }
  
    if(BTSerial.available()>0)
    { 
      AutoAppValue= BTSerial.read();
    }
  
    if(AutoAppValue != PrevAutoAppValue)
    {
      if(AutoAppValue>=0&&AutoAppValue<=127)
      {
        Serial.println(AutoAppValue);
        PrevAutoAppValue=AutoAppValue;
      }
    }   
   
    if(AutoAppValue == 'Z')             //자동사육모드 종료 시 무한루프 탈출
    {
      AppValue = 0;
      break;
    }
  } 
}

void loop()
{
  sensorRecv();
  unsigned long CurrentMillis = millis(); 
  
  if(Water<60)         //물 그릇에 물이 없을때
  {
    WCharge=1;
  }
  
  if(Water>=60)        //물 그릇에 물이 있을때
  {
    WCharge=0;
  }
  
  sprintf(data,"%02d%02d%01d%01d%02d%02d%01d%01d",temp.Temp,humi.Humi,doorState,dateCh,temp.TempAvg,humi.HumiAvg,WCharge,mov.MovState);
    //데이터 스트림
  
  if(CurrentMillis - PreviousMillis >= 4000)
    {  
    lcd.setCursor(8,0);
    lcd.print(temp.Temp);
    lcd.setCursor(8,1);
    lcd.print(humi.Humi);
    PreviousMillis = CurrentMillis; 
    } 
   
  Receive();
  
  if(DayCount%10==9)                    //온습도 값을 하루에 9번 누적 후 평균  
  {
    temp.TempAvg = temp.TempSum/9;
    humi.HumiAvg = humi.HumiSum/9;
  }

  else if(DayCount%10==0 && DayCount>0)   
  {
    dateCh=1;                        //하루가 지나면 날짜 변환         
  }
  
  else if(DayCount%10==1)                 //30초가 지나면 
  {
    dateCh=0;   
  }

  if(AppValue == 'K')                //앱에서 'K'를 받았을 시 자동사육모드
  {
    autoMode();  
  }
}
